'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _add = require('./add');

var _add2 = _interopRequireDefault(_add);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('Empty string', function (t) {
  var _rec = new _powerAssertRecorder();

  t.is(_rec._expr(_rec._capt((0, _add2.default)(''), 'arguments/0'), {
    content: 't.is(add(\'\'), 0)',
    filepath: 'test.js',
    line: 5
  }), 0);
});

(0, _ava2.default)('One number', function (t) {
  var _rec2 = new _powerAssertRecorder();

  t.is(_rec2._expr(_rec2._capt((0, _add2.default)('5'), 'arguments/0'), {
    content: 't.is(add(\'5\'), 5)',
    filepath: 'test.js',
    line: 9
  }), 5);
});

(0, _ava2.default)('Two numbers', function (t) {
  var _rec3 = new _powerAssertRecorder();

  t.is(_rec3._expr(_rec3._capt((0, _add2.default)('5,3'), 'arguments/0'), {
    content: 't.is(add(\'5,3\'), 8)',
    filepath: 'test.js',
    line: 13
  }), 8);
});

(0, _ava2.default)('Unknown amount of numbers', function (t) {
  var _rec4 = new _powerAssertRecorder();

  t.is(_rec4._expr(_rec4._capt((0, _add2.default)('2,4,7,10'), 'arguments/0'), {
    content: 't.is(add(\'2,4,7,10\'), 23)',
    filepath: 'test.js',
    line: 17
  }), 23);
});

(0, _ava2.default)('Unknown amount of numbers width delimeter \\n', function (t) {
  var _rec5 = new _powerAssertRecorder();

  t.is(_rec5._expr(_rec5._capt((0, _add2.default)('2,4\n7,10'), 'arguments/0'), {
    content: 't.is(add(\'2,4\\n7,10\'), 23)',
    filepath: 'test.js',
    line: 21
  }), 23);
});

(0, _ava2.default)('Unknown amount of numbers width custom delimeter :', function (t) {
  var _rec6 = new _powerAssertRecorder();

  t.is(_rec6._expr(_rec6._capt((0, _add2.default)('//:\n2:4:7:10'), 'arguments/0'), {
    content: 't.is(add(\'//:\\n2:4:7:10\'), 23)',
    filepath: 'test.js',
    line: 25
  }), 23);
});

(0, _ava2.default)('Unknown amount of numbers width custom delimeter !', function (t) {
  var _rec7 = new _powerAssertRecorder();

  t.is(_rec7._expr(_rec7._capt((0, _add2.default)('//!\n2!4!7!10'), 'arguments/0'), {
    content: 't.is(add(\'//!\\n2!4!7!10\'), 23)',
    filepath: 'test.js',
    line: 29
  }), 23);
});

(0, _ava2.default)('Unknown amount of numbers width one negative number', function (t) {
  var _rec8 = new _powerAssertRecorder();

  t.is(_rec8._expr(_rec8._capt((0, _add2.default)('2,4,-7,10'), 'arguments/0'), {
    content: 't.is(add(\'2,4,-7,10\'), \'Negatives not allowed: -7\')',
    filepath: 'test.js',
    line: 33
  }), 'Negatives not allowed: -7');
});

(0, _ava2.default)('Unknown amount of numbers width custom delimeter ! and one negative number', function (t) {
  var _rec9 = new _powerAssertRecorder();

  t.is(_rec9._expr(_rec9._capt((0, _add2.default)('//!\n2!4!-7!10'), 'arguments/0'), {
    content: 't.is(add(\'//!\\n2!4!-7!10\'), \'Negatives not allowed: -7\')',
    filepath: 'test.js',
    line: 37
  }), 'Negatives not allowed: -7');
});

(0, _ava2.default)('Unknown amount of numbers width many negatives numbers', function (t) {
  var _rec10 = new _powerAssertRecorder();

  t.is(_rec10._expr(_rec10._capt((0, _add2.default)('2,-4,-7,-10'), 'arguments/0'), {
    content: 't.is(add(\'2,-4,-7,-10\'), \'Negatives not allowed: -4,-7,-10\')',
    filepath: 'test.js',
    line: 41
  }), 'Negatives not allowed: -4,-7,-10');
});

(0, _ava2.default)('Unknown amount of numbers width custom delimeter ! and many negatives numbers', function (t) {
  var _rec11 = new _powerAssertRecorder();

  t.is(_rec11._expr(_rec11._capt((0, _add2.default)('//!\n2!-4!-7!-10'), 'arguments/0'), {
    content: 't.is(add(\'//!\\n2!-4!-7!-10\'), \'Negatives not allowed: -4,-7,-10\')',
    filepath: 'test.js',
    line: 45
  }), 'Negatives not allowed: -4,-7,-10');
});
//# sourceMappingURL=node_modules/.cache/ava/5d6460298b36b48b54e3f1019a6e1eef.js.map
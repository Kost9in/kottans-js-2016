'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _add = require('./add');

var _add2 = _interopRequireDefault(_add);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('Empty string', function (t) {
  var _rec = new _powerAssertRecorder();

  t.is(_rec._expr(_rec._capt((0, _add2.default)(''), 'arguments/0'), {
    content: 't.is(add(\'\'), 0)',
    filepath: 'test.js',
    line: 5
  }), 0);
});

(0, _ava2.default)('One number', function (t) {
  var _rec2 = new _powerAssertRecorder();

  t.is(_rec2._expr(_rec2._capt((0, _add2.default)('5'), 'arguments/0'), {
    content: 't.is(add(\'5\'), 5)',
    filepath: 'test.js',
    line: 9
  }), 5);
});

(0, _ava2.default)('Two numbers', function (t) {
  var _rec3 = new _powerAssertRecorder();

  t.is(_rec3._expr(_rec3._capt((0, _add2.default)('5,3'), 'arguments/0'), {
    content: 't.is(add(\'5,3\'), 8)',
    filepath: 'test.js',
    line: 13
  }), 8);
});

(0, _ava2.default)('Unknown amount of numbers', function (t) {
  var _rec4 = new _powerAssertRecorder();

  t.is(_rec4._expr(_rec4._capt((0, _add2.default)('2,4,7,10'), 'arguments/0'), {
    content: 't.is(add(\'2,4,7,10\'), 23)',
    filepath: 'test.js',
    line: 17
  }), 23);
});
//# sourceMappingURL=node_modules/.cache/ava/bd71d190f98f06a35f7b0c4573a8aa8c.js.map